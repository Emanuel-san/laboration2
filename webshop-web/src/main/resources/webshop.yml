openapi: 3.0.1
info:
  title: Webshop API
  description: >
    A simple webshop REST API for storing resources regarding products, cart contents and orders.
  version: 1.0.0
paths:
  ###################### /products
  /products:
    get:
      tags:
        - Products
      operationId: getProducts
      summary: Retrieve all products
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter products by name
      responses:
        200:
          description: Products response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductEntity'
    post:
      tags:
        - Products
      operationId: createProduct
      summary: Add a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntity'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        400:
          description: Response for bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/{product-id}:
    get:
      tags:
        - Products
      operationId: getProduct
      summary: Retrieve a specific product
      parameters:
        - in: path
          name: product-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        404:
          description: Response when specified product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Products
      summary: Update an existing product
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      parameters:
        - in: path
          name: product-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        400:
          description: Response for bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Response when specified product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Products
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - in: path
          name: product-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        404:
          description: Response when specified product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  ###################### /shopping-carts
  /shopping-carts/{cart-id}:
    get:
      tags:
        - Shopping-Carts
      operationId: getShoppingCart
      summary: Retrieve a specific shopping cart
      parameters:
        - in: path
          name: cart-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shopping-cart-entity'
        404:
          description: Response when specified shopping cart was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Shopping-Carts
      operationId: createShoppingCart
      summary: Create a new shopping cart
      parameters:
        - in: path
          name: cart-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shopping-cart-entity'
  /shopping-carts/items:
    put:
      tags:
        - Shopping-Carts
      summary: Add an item to cart
      operationId: addToShoppingCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntity'
        required: true
      parameters:
        - in: query
          name: cart-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shopping-cart-entity'
    delete:
      tags:
        - Shopping-Carts
      summary: Delete item from cart
      operationId: deleteFromShoppingCart
      parameters:
        - in: query
          name: product-id
          schema:
            type: string
          required: true
        - in: query
          name: cart-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shopping-cart-entity'
  ###################### /orders
  /orders:
    get:
      tags:
        - Orders
      summary: Get all existing orders
      operationId: getOrders
      responses:
        200:
          description: Orders response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{shopping-cart-id}:
    post:
      tags:
        - Orders
      summary: Create a new order of an existing shopping cart
      operationId: createOrder
      parameters:
        - in: path
          name: shopping-cart-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{order-id}:
    get:
      tags:
        - Orders
      summary: Get data for an existing order.
      operationId: getOrder
      parameters:
        - in: path
          name: order-id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Response when specified order was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - Users
      summary: Add a new user from an authentication event
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - Users
      summary: Fetch a user by provider and email
      operationId: getUser
      parameters:
        - in: query
          name: provider
          schema:
            $ref: '#/components/schemas/Provider'
          required: true
        - in: query
          name: email
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            email: email access
            profile: profile access
            openid: OIDC
  schemas:
    Provider:
      enum: [GOOGLE, LOCAL]
      type: string
    Role:
      enum: [SHOP_USER, SHOP_ADMIN]
      type: string
    User:
      type: object
      x-class-extra-annotation: "@org.springframework.data.mongodb.core.mapping.Document(\"users\")"
      description: Represents a user
      properties:
        provider:
          $ref: '#/components/schemas/Provider'
        role:
          $ref: '#/components/schemas/Role'
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
    Product:
      type: object
      x-class-extra-annotation: "@lombok.Builder"
      description: Representation of a Product resource
      properties:
        name:
          type: string
        price:
          type: number
          minimum: 0
        description:
          type: string
        image:
          type: string
    ProductEntity:
      type: object
      x-class-extra-annotation: "@org.springframework.data.mongodb.core.mapping.Document(\"products\")"
      description: Representation of a Product resource
      required:
        - productId
        - name
        - price
        - description
      properties:
        productId:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        price:
          type: number
          nullable: false
          minimum: 0
        description:
          type: string
          nullable: false
        image:
          type: string
    Shopping-cart-entity:
      type: object
      x-class-extra-annotation: "@org.springframework.data.mongodb.core.mapping.Document(\"carts\")"
      description: Representation of a Shopping-cart resource
      required:
        - cartId
      properties:
        cartId:
          nullable: false
          type: string
        customerId:
          type: string
        productItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    Shopping-cart:
      type: object
      description: Representation of a Shopping-cart resource
      properties:
        productItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      description: Representation of a Items in a cart
      required:
        - amount
        - productId
      properties:
        quantity:
          type: number
        productId:
          type: string
        product:
          $ref: '#/components/schemas/Product'
    CartSummary:
      type: object
      description: Total value summary of a cart
      allOf:
        - $ref: '#/components/schemas/Shopping-cart-entity'
        - $ref: '#/components/schemas/TotalSummary'
        - type: object
    TotalSummary:
      type: object
      description: Total value summary
      properties:
        currency:
          type: string
        total:
          type: number
        vat:
          type: number
    Order:
      type: object
      description: Representation of an order resource
      properties:
        orderId:
          type: string
        paid:
          type: boolean
          default: false
        productItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
      allOf:
        - $ref: '#/components/schemas/TotalSummary'
    ErrorResponse:
      type: object
      description: Represents a descriptive error response
      properties:
        error:
          type: string
        message:
          type: string
    StatusEntity:
      type: object
      description: Status object to indicate if an operation was successful or not
      required:
        - success
      properties:
        success:
          type: boolean
          nullable: false